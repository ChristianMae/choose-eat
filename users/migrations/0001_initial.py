# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-07-14 10:50
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('prefs', models.TextField(default="{'Afghan': 0, 'African': 0, 'American (Traditional)': 0, 'Arabian': 0, 'Argentine': 0, 'Asian Fusion': 0, 'Australian': 0, 'Austrian': 0, 'Bangladeshi': 0, 'Basque': 0, 'Barbeque': 0, 'Belgian': 0, 'Bistros': 0, 'Brasseries': 0, 'Brazilian': 0, 'Breakfast & Brunch': 0, 'British': 0, 'Buffets': 0, 'Bulgarian': 0, 'Burgers': 0, 'Burmese': 0, 'Cafes': 0, 'Cafeteria': 0, 'Cajun/Creole': 0, 'Cambodian': 0, 'Caribbean': 0, 'Chicken Shop': 0, 'Chinese': 0, 'Creperies': 0, 'Cuban': 0, 'Delis': 0, 'Diners': 0, 'Dinner Theater': 0, 'Ethiopian': 0, 'Filipino': 0, 'Fish & Chips': 0, 'Fondue': 0, 'Food Stands': 0, 'French': 0, 'Gastropubs': 0, 'German': 0, 'Gluten-Free': 0, 'Greek': 0, 'Guamanian': 0, 'Halal': 0, 'Hawaiian': 0, 'Himalayan/Nepalese': 0, 'Honduran': 0, 'Hot Dogs': 0, 'Fast Food': 0, 'Hot Pot': 0, 'Hungarian': 0, 'Indonesian': 0, 'Indian': 0, 'Irish': 0, 'Italian': 0, 'Japanese': 0, 'Kebab': 0, 'Korean': 0, 'Kosher': 0, 'Laotian': 0, 'Latin American': 0, 'Malaysian': 0, 'Mediterranean': 0, 'Mexican': 0, 'Middle Eastern': 0, 'Modern European': 0, 'Mongolian': 0, 'Moroccan': 0, 'Nicaraguan': 0, 'Noodles': 0, 'Pakistani': 0, 'Pan Asian': 0, 'Persian/Iranian': 0, 'Peruvian': 0, 'Pizza': 0, 'Polish': 0, 'Pop-Up Restaurants': 0, 'Portuguese': 0, 'Live/Raw Food': 0, 'Russian': 0, 'Salad': 0, 'Sandwiches': 0, 'Scandinavian': 0, 'Seafood': 0, 'Singaporean': 0, 'Soup': 0, 'Spanish': 0, 'Sri Lankan': 0, 'Steakhouses': 0, 'Sushi Bars': 0, 'Syrian': 0, 'Taiwanese': 0, 'Tapas Bars': 0, 'Tapas/Small Plates': 0, 'Tex-Mex': 0, 'Thai': 0, 'Turkish': 0, 'Ukrainian': 0, 'Vegan': 0, 'Vegetarian': 0, 'Vietnamese': 0, 'Waffles': 0, 'Wok': 0}\n")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friends', models.BooleanField(default=False)),
                ('user_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userA', to=settings.AUTH_USER_MODEL)),
                ('user_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userB', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
